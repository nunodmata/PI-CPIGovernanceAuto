{
    "codeNarc": {
        "url": "https://codenarc.org",
        "version": "3.3.0"
    },
    "report": {
        "timestamp": "Jan 15, 2024, 11:42:17 AM"
    },
    "project": {
        "title": null,
        "sourceDirectories": [
            "/files/unzip_flow"
        ]
    },
    "summary": {
        "totalFiles": 0,
        "filesWithViolations": 0,
        "priority1": 0,
        "priority2": 0,
        "priority3": 0
    },
    "packages": [
        {
            "path": "",
            "totalFiles": 0,
            "filesWithViolations": 0,
            "priority1": 0,
            "priority2": 0,
            "priority3": 0,
            "files": [
                
            ]
        }
    ],
    "rules": [
        {
            "name": "ClassName",
            "description": "Verifies that the name of a class matches a regular expression. By default it checks that the class name starts with an uppercase letter and is followed by zero or more word characters (letters, numbers or underscores). The regex property specifies the regular expression used to validate the class name."
        },
        {
            "name": "ConfusingTernary",
            "description": "In a ternary expression avoid negation in the test. For example, rephrase: \"(x != y) ? diff : same\" as: \"(x == y) ? same : diff\". Consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as \"does the error case go first?\" or \"does the common case go first?\"."
        },
        {
            "name": "CyclomaticComplexity",
            "description": "Checks the cyclomatic complexity for methods/classes.A method (or \"closure field\") with a cyclomatic complexity value greater than the maxMethodComplexity property (1) causes a violation. Likewise, a class that has an (average method) cyclomatic complexityvalue greater than the maxClassAverageMethodComplexity property (20) causes a violation."
        },
        {
            "name": "MethodName",
            "description": "Verifies that the name of each method matches a regular expression. By default it checks that the method name starts with a lowercase letter. The regex property specifies the regular expression to check the method name against.  The ignoreMethodNames property (null) can specify method names that should be ignored, optionally containing wildcard characters ('*' or '?')."
        },
        {
            "name": "StatelessDao",
            "description": "No description provided for rule named [StatelessDao]"
        },
        {
            "name": "UnnecessarySemicolon",
            "description": "Semicolons as line terminators are not required in Groovy: remove them. Do not use a semicolon as a replacement for empty braces on for and while loops; this is a confusing practice."
        }
    ]
}